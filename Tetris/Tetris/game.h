#pragma once
#include<iostream>
#include "system.h"
#include<queue>
#include<cstdlib>
#include<ctime>

#define TABLE_R 20
#define TABLE_C 12

using namespace std;

//1 : 벽, 2: 현재 움직이는 블록, 3: 쌓여있는 블록
class Game {
private:
	int r, c;
	vector<vector<int>> table;
	int cur_BLOCK;//0 ~ 6
	int cur_rotation;// 0 ~ 3
	bool turn_change;
	bool game_over;
	queue<int> next_block_q;
	const int BLOCK[7][4][4][4] = {
		{{	{0, 0, 0, 0},
			{2, 2, 2, 2},
			{0, 0, 0, 0},
			{0, 0, 0, 0}},

		{	{0, 2, 0, 0},
			{0, 2, 0, 0},
			{0, 2, 0, 0},
			{0, 2, 0, 0}},

		{	{0, 0, 0, 0},
			{2, 2, 2, 2},
			{0, 0, 0, 0},
			{0, 0, 0, 0}},

		{	{0, 2, 0, 0},
			{0, 2, 0, 0},
			{0, 2, 0, 0},
			{0, 2, 0, 0}}},



		{{	{0, 2, 0, 0},
			{0, 2, 0, 0},
			{0, 2, 2, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 2},
			{0, 2, 0, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{0, 0, 2, 0},
			{0, 0, 2, 0}},

		{	{0, 0, 0, 0},
			{0, 0, 2, 0},
			{2, 2, 2, 0},
			{0, 0, 0, 0}}},



		{{	{0, 0, 2, 0},
			{0, 0, 2, 0},
			{0, 2, 2, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 0, 0},
			{0, 2, 2, 2},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{0, 2, 0, 0},
			{0, 2, 0, 0}},

		{	{0, 0, 0, 0},
			{2, 2, 2, 0},
			{0, 0, 2, 0},
			{0, 0, 0, 0}}},



		{{	{0, 0, 0, 0},
			{0, 2, 0, 0},
			{0, 2, 2, 0},
			{0, 0, 2, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{2, 2, 0, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 0, 0},
			{0, 2, 2, 0},
			{0, 0, 2, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{2, 2, 0, 0},
			{0, 0, 0, 0}}},



		{{	{0, 0, 0, 0},
			{0, 0, 2, 0},
			{0, 2, 2, 0},
			{0, 2, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{0, 0, 2, 2},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 0, 2, 0},
			{0, 2, 2, 0},
			{0, 2, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{0, 0, 2, 2},
			{0, 0, 0, 0}}},



		{ {	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{0, 2, 2, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{0, 2, 2, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{0, 2, 2, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 0, 0},
			{0, 2, 2, 0},
			{0, 2, 2, 0},
			{0, 0, 0, 0}} },



		{ {	{0, 0, 0, 0},
			{0, 2, 2, 2},
			{0, 0, 2, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 2, 0},
			{0, 2, 2, 0},
			{0, 0, 2, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 2, 0},
			{0, 2, 2, 2},
			{0, 0, 0, 0},
			{0, 0, 0, 0}},

		{	{0, 0, 2, 0},
			{0, 0, 2, 2},
			{0, 0, 2, 0},
			{0, 0, 0, 0}} },
	};
public :
	void combo_check();
	void left_right_check();
	void rotation_check();
	void recontrolTable();//다음 움직임 전에 자신의 원래 흔적을 지우는 함수
	bool get_turn_change();
	bool get_game_over();
	void convert_active_block_to_static_block();
	void check_turn_change();
	void reset_RC();
	void check_gameover_at_change_turn();
	void chage_block_q();
	void downBlock();
	void gameInit();
	bool is_wall_position(int i, int j);
	void controlTable();
	void drawTable();
};